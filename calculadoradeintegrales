<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Calculadora de Integrales</title>
  <!-- Tailwind CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Algebrite para cálculo simbólico -->
  <script src="https://unpkg.com/algebrite"></script>
  <!-- MathJax para mostrar fórmulas bonitas -->
  <script>
    window.MathJax = {
      tex: { inlineMath: [['$','$'], ['\\(','\\)']] },
      svg: { fontCache: 'global' }
    };
  </script>
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
</head>
<body class="bg-slate-50 min-h-screen flex items-center justify-center p-6">
  <div class="max-w-4xl w-full bg-white rounded-2xl shadow-lg p-6">
    <h1 class="text-2xl font-semibold mb-2">Calculadora de integrales</h1>
    <p class="text-sm text-slate-600 mb-4">Introduce una función, elige la variable y (opcionalmente) límites para calcular integrales indefinidas o definidas usando <strong>Algebrite</strong> (simbólico) y ver resultados renderizados con MathJax.</p>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
      <label class="md:col-span-2">
        <div class="text-sm text-slate-700 mb-1">Función (ej: sin(x)*x^2 + 3)</div>
        <textarea id="expr" class="w-full rounded-lg border p-3 h-28" placeholder="Escribe la función aquí">sin(x)*x^2</textarea>
      </label>

      <div>
        <div class="text-sm text-slate-700 mb-1">Variable</div>
        <input id="var" class="w-full rounded-lg border p-3" value="x" />

        <div class="text-sm text-slate-700 mt-3">Tipo</div>
        <select id="mode" class="w-full rounded-lg border p-2 mt-1">
          <option value="indefinite">Indefinida</option>
          <option value="definite">Definida</option>
        </select>

        <div id="limits" class="mt-3 hidden">
          <div class="text-sm text-slate-700">Límite inferior</div>
          <input id="a" class="w-full rounded-lg border p-2 mt-1" placeholder="ej: 0" />
          <div class="text-sm text-slate-700 mt-2">Límite superior</div>
          <input id="b" class="w-full rounded-lg border p-2 mt-1" placeholder="ej: pi" />
        </div>
      </div>
    </div>

    <div class="flex gap-3 items-center">
      <button id="compute" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow">Calcular</button>
      <button id="clear" class="border px-4 py-2 rounded-lg">Limpiar</button>
      <button id="example" class="ml-auto text-sm text-slate-600">Cargar ejemplo</button>
    </div>

    <hr class="my-4" />

    <div>
      <div class="flex items-center justify-between mb-2">
        <h2 class="text-lg font-medium">Resultado</h2>
        <div class="text-sm text-slate-500">Puedes copiar el resultado simbólico o numérico</div>
      </div>

      <div id="result-box" class="rounded-lg border p-4 bg-gray-50 min-h-[72px]"></div>

      <div id="numeric-box" class="mt-4 rounded-lg border p-4 bg-gray-50 hidden"></div>
    </div>

    <details class="mt-4 text-sm text-slate-600">
      <summary class="cursor-pointer">Cómo funciona</summary>
      <ul class="mt-2 pl-4 list-disc">
        <li>Se usa <code>Algebrite.integral(expr, var)</code> para obtener la integral simbólica.</li>
        <li>Si pides integral definida, se evalúa la primitiva en los límites y se computa la diferencia.</li>
        <li>Para expresiones numéricas se intenta evaluar con <code>Algebrite.run</code> y convertir a float si es necesario.</li>
      </ul>
    </details>
  </div>

  <script>
    const exprInput = document.getElementById('expr');
    const varInput = document.getElementById('var');
    const modeSelect = document.getElementById('mode');
    const limitsDiv = document.getElementById('limits');
    const aInput = document.getElementById('a');
    const bInput = document.getElementById('b');
    const computeBtn = document.getElementById('compute');
    const resultBox = document.getElementById('result-box');
    const numericBox = document.getElementById('numeric-box');
    const clearBtn = document.getElementById('clear');
    const exampleBtn = document.getElementById('example');

    modeSelect.addEventListener('change', () => {
      if (modeSelect.value === 'definite') limitsDiv.classList.remove('hidden');
      else limitsDiv.classList.add('hidden');
    });

    exampleBtn.addEventListener('click', () => {
      exprInput.value = 'x^2 * cos(x)';
      varInput.value = 'x';
      modeSelect.value = 'indefinite';
      limitsDiv.classList.add('hidden');
    });

    clearBtn.addEventListener('click', () => {
      exprInput.value = '';
      aInput.value = '';
      bInput.value = '';
      resultBox.innerHTML = '';
      numericBox.innerHTML = '';
      numericBox.classList.add('hidden');
      MathJax.typesetClear && MathJax.typesetClear();
    });

    function renderMath(latex, target) {
      target.innerHTML = '$$' + latex + '$$';
      if (window.MathJax && MathJax.typesetPromise) MathJax.typesetPromise([target]);
    }

    function safeAlgebriteRun(code) {
      try {
        return Algebrite.run(code);
      } catch (e) {
        return null;
      }
    }

    computeBtn.addEventListener('click', () => {
      const expr = exprInput.value.trim();
      const v = varInput.value.trim() || 'x';
      if (!expr) {
        resultBox.textContent = 'Escribe una función para integrar.';
        return;
      }

      resultBox.innerHTML = 'Calculando...';
      numericBox.classList.add('hidden');
      numericBox.innerHTML = '';

      setTimeout(() => {
        try {
          // Obtener primitiva simbólica
          const integralCmd = `integral(${expr}, ${v})`;
          const primitive = safeAlgebriteRun(integralCmd);

          if (!primitive) {
            resultBox.textContent = 'No se pudo calcular la integral simbólica.';
            return;
          }

          // Limpiar la salida para presentarla como LaTeX
          // Algebrite devuelve expresiones en texto; pedimos conversión a LaTeX
          const primitiveLatex = safeAlgebriteRun(`printlatex(${primitive})`);

          // Mostrar la primitiva
          resultBox.innerHTML = '';
          const primTitle = document.createElement('div');
          primTitle.className = 'text-sm text-slate-600 mb-2';
          primTitle.textContent = 'Primitiva simbólica (F):';
          resultBox.appendChild(primTitle);

          const primRender = document.createElement('div');
          primRender.className = 'prose';
          renderMath(primitiveLatex || primitive, primRender);
          resultBox.appendChild(primRender);

          // Si es definida, evaluar en límites
          if (modeSelect.value === 'definite') {
            const a = aInput.value.trim();
            const b = bInput.value.trim();
            if (a === '' || b === '') {
              const warn = document.createElement('div');
              warn.className = 'text-sm text-red-600 mt-2';
              warn.textContent = 'Para integral definida, introduce ambos límites.';
              resultBox.appendChild(warn);
              return;
            }

            // Evaluar primitiva en b y a
            const Fb = safeAlgebriteRun(`eval(${primitive}, ${v}, ${b})`);
            const Fa = safeAlgebriteRun(`eval(${primitive}, ${v}, ${a})`);

            // intentamos convertir a número flotante
            let numFb = null, numFa = null;
            try { numFb = parseFloat(Algebrite.run(`float(${Fb})`)); } catch(e) {}
            try { numFa = parseFloat(Algebrite.run(`float(${Fa})`)); } catch(e) {}

            const numericResult = (isFinite(numFb) && isFinite(numFa)) ? (numFb - numFa) : null;

            numericBox.classList.remove('hidden');
            numericBox.innerHTML = '';

            const defTitle = document.createElement('div');
            defTitle.className = 'text-sm text-slate-600 mb-2';
            defTitle.textContent = 'Integral definida (evaluada):';
            numericBox.appendChild(defTitle);

            const exprLatex = `\\int_{${a}}^{${b}} ${safeAlgebriteRun(`printlatex(${expr})`)}`;
            const exprRender = document.createElement('div');
            exprRender.className = 'prose mb-2';
            renderMath(exprLatex, exprRender);
            numericBox.appendChild(exprRender);

            const valueDiv = document.createElement('div');
            valueDiv.className = 'text-sm';
            if (numericResult !== null) {
              valueDiv.innerHTML = `Resultado numérico: <strong>${numericResult}</strong>`;
            } else {
              // mostrar simbólico F(b)-F(a)
              const diff = safeAlgebriteRun(`${primitive}.replaceAll('\n','')`);
              const symb = safeAlgebriteRun(`simplify((${primitive.replace(/\n/g,'')})|0)`);
              const FbLatex = safeAlgebriteRun(`printlatex(${Fb})`);
              const FaLatex = safeAlgebriteRun(`printlatex(${Fa})`);
              valueDiv.innerHTML = 'Resultado simbólico: ';
              const symbDiv = document.createElement('div');
              symbDiv.className = 'mt-2';
              renderMath((FbLatex || Fb) + ' - ' + (FaLatex || Fa), symbDiv);
              numericBox.appendChild(valueDiv);
              numericBox.appendChild(symbDiv);
            }

            if (numericResult !== null) numericBox.appendChild(valueDiv);

          }

          // agregar botones copiar
          const copyBtn = document.createElement('button');
          copyBtn.className = 'mt-3 inline-block bg-slate-200 px-3 py-1 rounded';
          copyBtn.textContent = 'Copiar primitiva (texto)';
          copyBtn.addEventListener('click', () => {
            navigator.clipboard.writeText(primitive).then(()=>{
              copyBtn.textContent = 'Copiado!';
              setTimeout(()=> copyBtn.textContent = 'Copiar primitiva (texto)', 1200);
            });
          });
          resultBox.appendChild(copyBtn);

        } catch (err) {
          resultBox.textContent = 'Error al calcular: ' + (err.message || err);
          console.error(err);
        }
      }, 60);
    });
  </script>
</body>
</html>
